{"version":3,"sources":["components/RepositoryCard.tsx","actions/github.ts","actions/paginator.ts","actions/ratelimit.ts","reducers/paginator.ts","api.ts","reducers/github.ts","actions/searchAsYouType.ts","reducers/searchAsYouType.ts","state-store.ts","reducers/ratelimit.ts","components/Paginator.tsx","components/DebouncedInput.tsx","components/StatusBar.tsx","components/GithubRepoSearch.tsx","serviceWorker.ts","index.tsx"],"names":["RepositoryCard","_ref","author","name","description","url","stars","watchers","forks","react","className","href","target","rel","index_es","Action","fetchData","query","page","perPage","action","FETCH_DATA","fetchDataFulfilled","data","FETCH_DATA_FULFILLED","fetchDataRejected","reason","FETCH_DATA_REJECTED","nextPage","NEXT_PAGE","prevPage","PREV_PAGE","setTotal","total","SET_TOTAL","paginatorInitialState","current","get","GET","getFulfilled","GET_FULFILLED","getRejected","GET_REJECTED","update","UPDATE","root","api","searchRateLimit","concat","Promise","resolve","reject","fetch","then","response","json","resources","search","catch","searchRepositories","queryPage","perQuery","reposPerPage","encodeURIComponent","status","console","error","Error","links","headers","has","split","map","item","match","slice","reduce","accumulator","_ref2","Object","slicedToArray","link","objectSpread","defineProperty","ratelimit","remaining","limit","reset","paginated","index","items","length","start","end","githubSearchInitialState","undefined","isLoading","reposPerQuery","enable","ENABLE","disable","DISABLE","configKey","searchAsYouTypeInitialState","localStorage","getItem","initialState","paginator","github","searchAsYouType","store","createStore","combineReducers","state","arguments","type","payload","dispatch","_action$payload","Math","ceil","total_count","UPDATE_DATA","ret","assign","setItem","connect","toNextPage","_stateStore$getState","stateStore","getState","currentQueryPage","max","githubActions","paginatorActions","toPrevPage","onClick","DebouncedInput","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","attributes","handleKeyUp","event","isPropagationStopped","onKeyUp","persist","debouncedEmit","onDebounce","_this$props","delay","objectWithoutProperties","debounce","tabIndex","React","countdownRenderer","secondsTotal","hours","minutes","seconds","completed","_store$getState$ratel","setTimeout","ratelimitActions","StatusBar","_React$Component","_getPrototypeOf2","_len","args","Array","_key","apply","onDebounceToggle","checked","debounceActions","inherits","createClass","key","value","debounceDelay","queryMinLength","dist_index_es","date","renderer","htmlFor","id","onChange","GithubRepoSearch","onInputKeyUp","stopPropagation","trim","placeholder","currentPage","DebouncedInput_DebouncedInput","src_components_StatusBar","components_Paginator","repo","RepositoryCard_RepositoryCard","owner","login","html_url","watchers_count","stargazers_count","pagesTotal","Boolean","window","location","hostname","ReactDOM","render","react_default","a","createElement","es","src_components_GithubRepoSearch","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.294f9e3d.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StarRate, Visibility, Share } from '@material-ui/icons';\nimport './RepositoryCard.sass';\n\ninterface Props {\n  author: string;\n  name: string;\n  description: string;\n  url: string;\n  watchers: number;\n  stars: number;\n  forks: number;\n}\n\nexport default function RepositoryCard({\n  author, name, description, url, stars, watchers, forks,\n}: Props) {\n  return (\n    <a className=\"repoCard-link\" href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n      <div className=\"repoCard\">\n        <div className=\"repoCard-info\">\n          <div className=\"repoCard-fullname\">\n            <span className=\"repoCard-author\">{author}</span>\n            <span className=\"repoCard-divider\">/</span>\n            <span className=\"repoCard-name\">{name}</span>\n          </div>\n          <div className=\"repoCard-stats\">\n            <span className=\"repoCard-stat\"><Visibility />{watchers}</span>\n            <span className=\"repoCard-stat\"><StarRate />{stars}</span>\n            <span className=\"repoCard-stat\"><Share />{forks}</span>\n          </div>\n        </div>\n        <div className=\"repoCard-desc\">{description}</div>\n      </div>\n    </a>\n  );\n}\n","import { action } from 'typesafe-actions';\nimport { GithubRepoSearchResponse } from '../types';\n\nexport enum Action {\n  FETCH_DATA = 'github-search/FETCH_DATA',\n  FETCH_DATA_FULFILLED = 'github-search/FETCH_DATA_FULFILLED',\n  FETCH_DATA_REJECTED = 'github-search/FETCH_DATA_REJECTED',\n  UPDATE_DATA = 'github-search/UPDATE_DATA',\n}\n\nexport const fetchData = (\n  query: string, page: number, perPage: number,\n) => action(Action.FETCH_DATA, { query, page, perPage });\nexport const fetchDataFulfilled = (\n  data: GithubRepoSearchResponse,\n) => action(Action.FETCH_DATA_FULFILLED, data);\nexport const fetchDataRejected = (reason: string) => action(Action.FETCH_DATA_REJECTED, reason);\nexport const updateData = (data: GithubRepoSearchResponse) => action(Action.UPDATE_DATA, data);\n","import { action } from 'typesafe-actions';\n\nexport enum Action {\n  NEXT_PAGE = 'github-search/paginator/NEXT_PAGE',\n  PREV_PAGE = 'github-search/paginator/PREV_PAGE',\n  SET_TOTAL = 'github-search/paginator/SET_TOTAL'\n}\n\nexport const nextPage = () => action(Action.NEXT_PAGE);\nexport const prevPage = () => action(Action.PREV_PAGE);\nexport const setTotal = (total: number) => action(Action.SET_TOTAL, total);\n","import { action } from 'typesafe-actions';\nimport { GithubRateLimit } from '../types';\n\nexport enum Action {\n  GET = 'github-search/ratelimit/GET',\n  GET_FULFILLED = 'github-search/ratelimit/GET_FULFILLED',\n  GET_REJECTED = 'github-search/ratelimit/GET_REJECTED',\n  UPDATE = 'github-search/ratelimit/UPDATE',\n}\n\nexport const get = () => action(Action.GET);\nexport const getFulfilled = (data: GithubRateLimit) => action(Action.GET_FULFILLED, data);\nexport const getRejected = (reason: string) => action(Action.GET_REJECTED, reason);\nexport const update = (data: GithubRateLimit) => action(Action.UPDATE, data);\n","import { ActionType } from 'typesafe-actions';\nimport * as paginator from '../actions/paginator';\n\n\nexport type PaginatorActions = ActionType<typeof paginator>\n\nexport interface PaginatorState {\n  current: number; // currently shown page\n  total: number; // total number of pages\n}\n\nexport const paginatorInitialState: PaginatorState = {\n  current: 1,\n  total: 0,\n};\n\nexport default function paginatorReducer(\n  state: PaginatorState = paginatorInitialState, action: PaginatorActions,\n): PaginatorState {\n  switch (action.type) {\n    case paginator.Action.NEXT_PAGE:\n      if (state.current >= state.total) return state;\n      const nextPage = state.current + 1;\n      return { ...state, current: nextPage };\n    case paginator.Action.PREV_PAGE:\n      if (state.current === 1) return state;\n      return { ...state, current: state.current - 1 };\n    case paginator.Action.SET_TOTAL:\n      return { ...state, total: action.payload };\n    default:\n      return state;\n  }\n}\n","import {\n  GithubRepoSearchResponse, GithubRepoInfoPaginated,\n  GithubRateLimit, GithubApiRateLimitResponse,\n} from './types';\n\nconst root = 'https://api.github.com';\n\nexport default {\n  searchRateLimit: (): Promise<GithubRateLimit> => {\n    const url = `${root}/rate_limit`;\n\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(response => response.json())\n        .then((json: GithubApiRateLimitResponse) => resolve(json.resources.search))\n        .catch(reason => reject(reason));\n    });\n  },\n  searchRepositories: (\n    query: string, queryPage: number, perQuery: number, reposPerPage: number,\n  ): Promise<GithubRepoSearchResponse> => {\n    const url = `${root}/search/repositories?q=${encodeURIComponent(query)}&page=${queryPage}&per_page=${perQuery}`;\n\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then((response) => {\n          if (response.status !== 200) {\n            response.json().then(json => console.error(json));\n            reject(Error('API did not respond with status code 200'));\n            return;\n          }\n\n          // extract pagination links from headers\n          let links = {};\n          if (response.headers.has('Link')) {\n            links = response.headers\n              .get('Link')\n              .split(', ')\n              .map(item => item\n                .match(/<(.+)>; rel=\"(\\w+)\"/)\n                .slice(1)) // slice off the original string\n              .reduce(\n                (accumulator, [link, rel]) => ({ ...accumulator, [rel]: link }),\n                {},\n              ); // format from [[url, rel]] to {rel: url}\n          }\n\n          // extract ratelimit status from headers\n          const ratelimit = {\n            remaining: response.headers.get('X-RateLimit-Remaining'),\n            limit: response.headers.get('X-RateLimit-Limit'),\n            reset: response.headers.get('X-RateLimit-Reset'),\n          };\n\n          response.json().then((json) => {\n            // sort items into pages\n            const paginated: GithubRepoInfoPaginated = {};\n            for (let index = 0; index < json.items.length; index += reposPerPage) {\n              const start = index;\n              const end = index + reposPerPage;\n\n              const pagesInQuery = perQuery / reposPerPage;\n              const page = (pagesInQuery * (queryPage - 1)) + (end / reposPerPage);\n              paginated[page] = json.items.slice(start, end);\n            }\n            json.items = paginated;\n\n            resolve({\n              ...json, query, links, ratelimit,\n            });\n          });\n        })\n        .catch(reason => reject(reason));\n    });\n  },\n};\n","import { ActionType } from 'typesafe-actions';\nimport { GithubRepoSearchResponse } from '../types';\nimport * as github from '../actions/github';\nimport * as paginator from '../actions/paginator';\nimport * as ratelimit from '../actions/ratelimit';\nimport store from '../state-store';\nimport api from '../api';\n\nexport type GithubActions = ActionType<typeof github>\n\nexport interface GithubSearchState {\n  query: string | undefined;\n  data: GithubRepoSearchResponse | undefined;\n  isLoading: boolean;\n  reposPerPage: number;\n  reposPerQuery: number;\n}\n\nexport const githubSearchInitialState: GithubSearchState = {\n  query: undefined,\n  data: undefined,\n  isLoading: false,\n  reposPerPage: 10,\n  reposPerQuery: 30,\n};\n\nexport default function githubSearchReducer(\n  state: GithubSearchState = githubSearchInitialState, action: GithubActions,\n): GithubSearchState {\n  switch (action.type) {\n    case github.Action.FETCH_DATA:\n      const { query, page, perPage } = action.payload;\n      api\n        .searchRepositories(query, page, perPage, state.reposPerPage)\n        .then((response) => {\n          store.dispatch(github.fetchDataFulfilled(response));\n          // update paginator total page count\n          const total = Math.ceil(response.total_count / state.reposPerPage);\n          store.dispatch(paginator.setTotal(total));\n          // update ratelimit status\n          store.dispatch(ratelimit.update(response.ratelimit));\n        })\n        .catch(reason => store.dispatch(github.fetchDataRejected(reason)));\n      return { ...state, query, isLoading: true };\n    case github.Action.FETCH_DATA_REJECTED:\n      console.error('FETCH_DATA_REJECTED', action.payload);\n      return { ...state, isLoading: false };\n    case github.Action.FETCH_DATA_FULFILLED:\n    case github.Action.UPDATE_DATA:\n      const ret = { ...state, isLoading: false };\n\n      // if there is currently no data in the store\n      // or if it's a different query, replace it\n      if (!state.data || state.data.query !== action.payload.query) {\n        return { ...ret, data: action.payload };\n      }\n\n      // otherwise update the items\n\n      // we're making changes deep in the object,\n      // this won't fire off the event that state have changed\n      // and update the view, so we make a shallow copy,\n      // update items there and update state\n      const data = Object.assign({}, state.data);\n      data.items = { ...state.data.items, ...action.payload.items };\n      return { ...ret, data };\n    default:\n      return state;\n  }\n}\n","import { action } from 'typesafe-actions';\n\nexport enum Action {\n  ENABLE = 'github-search/searchAsYouType/ENABLE',\n  DISABLE = 'github-search/searchAsYouType/DISABLE',\n}\n\nexport const enable = () => action(Action.ENABLE);\nexport const disable = () => action(Action.DISABLE);\n","import { ActionType } from 'typesafe-actions';\nimport * as searchAsYouType from '../actions/searchAsYouType';\n\nconst configKey = 'github-search.searchAsYouType';\n\nexport type SearchAsYouTypeActions = ActionType<typeof searchAsYouType>\n\nexport type SearchAsYouTypeState = boolean;\n\nexport const searchAsYouTypeInitialState: SearchAsYouTypeState = localStorage.getItem(configKey)\n  ? localStorage.getItem(configKey) === 'true' : true;\n\n\nexport default function searchAsYouTypeReducer(\n  state: SearchAsYouTypeState = searchAsYouTypeInitialState, action: SearchAsYouTypeActions,\n): SearchAsYouTypeState {\n  switch (action.type) {\n    case searchAsYouType.Action.ENABLE:\n      localStorage.setItem(configKey, 'true');\n      return true;\n    case searchAsYouType.Action.DISABLE:\n      localStorage.setItem(configKey, 'false');\n      return false;\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers } from 'redux';\nimport { ActionType } from 'typesafe-actions';\nimport paginatorReducer, { PaginatorState, paginatorInitialState } from './reducers/paginator';\nimport ratelimitReducer, { RatelimitState, ratelimitInitialState } from './reducers/ratelimit';\nimport githubSearchReducer, { GithubSearchState, githubSearchInitialState } from './reducers/github';\nimport searchAsYouTypeReducer, { SearchAsYouTypeState, searchAsYouTypeInitialState } from './reducers/searchAsYouType';\n\nexport type RootAction = ActionType<typeof import('./actions')>;\n\nexport interface StoreState {\n  paginator: PaginatorState;\n  ratelimit: RatelimitState;\n  github: GithubSearchState;\n  searchAsYouType: SearchAsYouTypeState;\n}\n\nconst initialState: StoreState = {\n  paginator: paginatorInitialState,\n  ratelimit: ratelimitInitialState,\n  github: githubSearchInitialState,\n  searchAsYouType: searchAsYouTypeInitialState,\n};\n\nconst store = createStore(combineReducers({\n  paginator: paginatorReducer,\n  ratelimit: ratelimitReducer,\n  github: githubSearchReducer,\n  searchAsYouType: searchAsYouTypeReducer,\n}), initialState);\n\nexport default store;\n","import { ActionType } from 'typesafe-actions';\nimport { GithubRateLimit } from '../types';\nimport * as ratelimit from '../actions/ratelimit';\nimport store from '../state-store';\nimport api from '../api';\n\nexport type RatelimitActions = ActionType<typeof ratelimit>\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface RatelimitState extends GithubRateLimit { }\n\nexport const ratelimitInitialState: RatelimitState = {\n  remaining: 0,\n  limit: 0,\n  reset: 0,\n};\n\nexport default function ratelimitReducer(\n  state: RatelimitState = { remaining: 0, limit: 0, reset: 0 }, action: RatelimitActions,\n): RatelimitState {\n  switch (action.type) {\n    case ratelimit.Action.GET:\n      api\n        .searchRateLimit()\n        .then(response => store.dispatch(ratelimit.getFulfilled(response)))\n        .catch(reason => store.dispatch(ratelimit.getRejected(reason)));\n      return state;\n    case ratelimit.Action.GET_REJECTED:\n      console.error('QUERY_RATELIMIT_REJECTED', action.payload);\n      return state;\n    case ratelimit.Action.GET_FULFILLED:\n    case ratelimit.Action.UPDATE:\n      return { ...action.payload };\n    default:\n      return state;\n  }\n}\n","import * as React from 'react';\nimport { ArrowForward, ArrowBack } from '@material-ui/icons';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport * as githubActions from '../actions/github';\nimport * as paginatorActions from '../actions/paginator';\nimport stateStore, { StoreState, RootAction } from '../state-store';\n\ninterface Props {\n  // connected from state\n  current: number;\n  total: number;\n  perPage: number;\n  toNextPage?: () => void;\n  toPrevPage?: () => void;\n}\n\nexport function Paginator({\n  current, total, toPrevPage, toNextPage,\n}: Props) {\n  if (!total) return null;\n\n  return (\n    <div className=\"githubRepoSearch-Paginator\">\n      <ArrowBack onClick={toPrevPage} />\n      Page: {current} / {total}\n      <ArrowForward onClick={toNextPage} />\n    </div>\n  );\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    current: state.paginator.current,\n    total: state.paginator.total,\n    perPage: state.github.reposPerPage,\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<RootAction>) {\n  return {\n    toNextPage: () => {\n      const { paginator, github } = stateStore.getState();\n      const {\n        query, reposPerQuery, reposPerPage, data,\n      } = github;\n\n      // if on last page, return\n      if (paginator.current >= paginator.total) return;\n\n      if (!((paginator.current + 1) in data.items)) {\n        const currentQueryPage = Math.max(1, paginator.current / (reposPerQuery / reposPerPage));\n        dispatch(githubActions.fetchData(query, currentQueryPage + 1, reposPerQuery));\n      }\n\n      dispatch(paginatorActions.nextPage());\n    },\n    toPrevPage: () => dispatch(paginatorActions.prevPage()),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Paginator);\n","import * as React from 'react';\nimport { debounce } from 'throttle-debounce';\n\ninterface Attributes {\n  [key: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\ninterface Props extends Attributes {\n  // capture `onKeyUp` handler so it won't override internal handler\n  onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n  onDebounce: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n  delay: number;\n}\n\nexport default class DebouncedInput extends React.Component<Props, object> {\n  attributes: Attributes;\n\n  constructor(props: Props) {\n    super(props);\n    // separate `onKeyUp`, `onChange` and `delay` from the rest of the props\n    // to pass as <input> attributes\n    const {\n      onKeyUp, onDebounce, delay, ...attributes\n    } = this.props;\n    this.attributes = attributes;\n    this.debouncedEmit = debounce(delay, this.debouncedEmit);\n  }\n\n  handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.isPropagationStopped()) return;\n\n    const { onKeyUp } = this.props;\n    event.persist();\n    if (onKeyUp) onKeyUp(event);\n    this.debouncedEmit(event);\n  }\n\n  // eslint-disable-next-line react/destructuring-assignment\n  debouncedEmit = (event: React.KeyboardEvent<HTMLInputElement>) => this.props.onDebounce(event)\n\n  render() {\n    return (\n      <input\n        onKeyUp={this.handleKeyUp}\n        tabIndex={0}\n        {...this.attributes}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Autorenew, Done } from '@material-ui/icons';\nimport Countdown from 'react-countdown-now';\nimport * as debounceActions from '../actions/searchAsYouType';\nimport * as ratelimitActions from '../actions/ratelimit';\nimport store, { StoreState } from '../state-store';\nimport './StatusBar.sass';\n\ninterface Props {\n  ratelimit: {\n    remaining: number;\n    limit: number;\n    reset: number;\n  };\n  debounceDelay: number;\n  queryMinLength: number;\n  isLoading: boolean;\n  searchAsYouType: boolean;\n}\n\nconst countdownRenderer = (state: {\n  hours: number; minutes: number; seconds: number; completed: boolean;\n}) => {\n  const {\n    hours, minutes, seconds, completed,\n  } = state;\n  const secondsTotal = (hours * 3600) + (minutes * 60) + seconds;\n\n  if (completed) {\n    const { remaining, limit } = store.getState().ratelimit;\n    if (remaining !== limit) {\n      // have a 1 second delay before sending out the request,\n      // otherwise we seem to end get the old rate limit count,\n      // but new reset timestamp\n      setTimeout(() => store.dispatch(ratelimitActions.get()), 1000);\n    }\n    return null;\n  }\n\n  switch (secondsTotal) {\n    case 1:\n      return <span>Next reset: in {secondsTotal} second</span>;\n    default:\n      return <span>Next reset: in {secondsTotal} seconds</span>;\n  }\n};\n\nexport class StatusBar extends React.Component<Props, object> {\n  onDebounceToggle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const target = event.target as HTMLInputElement;\n\n    if (target.checked) store.dispatch(debounceActions.enable());\n    else store.dispatch(debounceActions.disable());\n  }\n\n  render() {\n    const {\n      ratelimit, debounceDelay, queryMinLength, isLoading, searchAsYouType,\n    } = this.props;\n\n    return (\n      <div className=\"statusBar\">\n        <span className=\"statusBar-column\">\n          <span>Minimal query length: {queryMinLength}</span>\n        </span>\n        <span className=\"statusBar-column\">\n          <span>Rate limit: {ratelimit.remaining}/{ratelimit.limit}</span>\n          {ratelimit.reset &&\n            <Countdown\n              key={ratelimit.reset}\n              date={ratelimit.reset * 1000}\n              renderer={countdownRenderer}\n            />\n          }\n        </span>\n        <span className=\"statusBar-column\">\n          <span>{isLoading ? <Autorenew /> : <Done />}</span>\n          <span>\n            <label htmlFor=\"debounceToggle\">\n              <input\n                type=\"checkbox\"\n                id=\"debounceToggle\"\n                checked={searchAsYouType}\n                onChange={this.onDebounceToggle}\n              />\n              Search-as-you-type\n            </label>\n          </span>\n          <span>Debounce delay: {debounceDelay}ms</span>\n        </span>\n\n      </div>\n    );\n  }\n}\n\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    ratelimit: state.ratelimit,\n    isLoading: state.github.isLoading,\n    searchAsYouType: state.searchAsYouType,\n  };\n}\n\nexport default connect(mapStateToProps)(StatusBar);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport RepositoryCard from './RepositoryCard';\nimport Paginator from './Paginator';\nimport DebouncedInput from './DebouncedInput';\nimport StatusBar from './StatusBar';\nimport * as githubActions from '../actions/github';\nimport * as ratelimitActions from '../actions/ratelimit';\nimport { GithubRepoSearchResponse, GithubRateLimit } from '../types';\nimport store, { StoreState } from '../state-store';\nimport './GithubRepoSearch.sass';\n\ninterface Props {\n  data: GithubRepoSearchResponse;\n  placeholder: string;\n  queryMinLength: number;\n  // connected from state\n  currentPage?: number;\n  pagesTotal: number;\n  perPage: number;\n  perQuery: number;\n  ratelimit: GithubRateLimit;\n  searchAsYouType: boolean;\n}\n\nexport class GithubRepoSearch extends React.Component<Props, object> {\n  constructor(props: Props) {\n    super(props);\n    store.dispatch(ratelimitActions.get());\n  }\n  onInputKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const { key } = event;\n    if (key === 'Tab') return; // can be fired off when alt tabbing;\n    if (key !== 'Enter') return;\n\n    event.stopPropagation(); // prevent debouncing\n    this.fetch(event.target as HTMLInputElement);\n  }\n\n  onDebounce = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const { searchAsYouType } = this.props;\n    if (!searchAsYouType) return;\n    this.fetch(event.target as HTMLInputElement);\n  }\n\n  fetch(target: HTMLInputElement) {\n    const value = target.value.trim();\n    if (!value) return;\n\n    const { queryMinLength } = this.props;\n    if (value.length < queryMinLength) return;\n\n    const { data } = store.getState().github;\n    if (data && data.query === value) return;\n\n    const { perQuery } = this.props;\n    store.dispatch(githubActions.fetchData(value, 1, perQuery));\n  }\n\n  render() {\n    const {\n      placeholder, currentPage, data, queryMinLength,\n    } = this.props;\n    const debounceDelay = 750;\n\n    return (\n      <div className=\"githubRepoSearch\">\n        <DebouncedInput\n          onKeyUp={this.onInputKeyUp}\n          onDebounce={this.onDebounce}\n          delay={debounceDelay}\n          type=\"text\"\n          placeholder={placeholder}\n        />\n\n        <StatusBar debounceDelay={debounceDelay} queryMinLength={queryMinLength} />\n        <Paginator />\n\n        <div className=\"githubRepoSearch-Items\">\n          {data && data.items[currentPage] && data.items[currentPage].map(\n            repo => (\n              <RepositoryCard\n                key={repo.id}\n                author={repo.owner.login}\n                name={repo.name}\n                description={repo.description}\n                url={repo.html_url}\n                watchers={repo.watchers_count}\n                stars={repo.stargazers_count}\n                forks={repo.forks}\n              />\n            ),\n          )\n          }\n        </div>\n\n        <Paginator />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    currentPage: state.paginator.current,\n    pagesTotal: state.paginator.total,\n    ratelimit: state.ratelimit,\n    perPage: state.github.reposPerPage,\n    perQuery: state.github.reposPerQuery,\n    data: state.github.data,\n    searchAsYouType: state.searchAsYouType,\n  };\n}\n\nexport default connect(mapStateToProps)(GithubRepoSearch);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { ReactElement } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport GithubRepoSearch from './components/GithubRepoSearch';\nimport store from './state-store';\nimport './index.sass';\nimport * as serviceWorker from './serviceWorker';\n\nconst App: React.FC = (): ReactElement => (\n  <Provider store={store}>\n    <div className=\"App\">\n      <GithubRepoSearch\n        placeholder=\"Search GitHub repositories\"\n        queryMinLength={3}\n      />\n    </div>\n  </Provider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}